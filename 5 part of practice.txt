1. Что подразумевается под тестовой средой?

      Тестовая среда делится на:
      
      Среда разработки - в ней разработчики пишут код, проводят отладку, исправляют ошибки, выполняют unit-тестирование. За эту среду так же отвечают разработчики.
      
      Среда тестирования - в этой среде работают тестировщики. Тут тестируются новые билды. Здесь проверяют функционал, проводят регрессионные проверки, воспроизводят ошибки. Эта среда появляется во время начала динамического тестирования. 
      
      Интеграционная среда - иногда реализована в рамках среды тестирования, а иногда в рамках первью среды. В этой среде собрана необходимая для end-to-end тестирования схема взаимодействующих друг с другом модулей, систем,продуктов. Сообсвенно, необходима она для интеграционного тестирования. 
      
      Превью среда - в идеале, эта среда идентичная или максимально приближенная к продуктивной: те же данные, то же аппаратно-программное окружение, та же производительность. Она используется, чтобы сделать финальную проверку ПО в условиях максимально приближенным к "боевым". Здесь тестировщики проводят заключительное end-to-end тестирвание функцинала, бизнес и пользоатели проводят UAT, а команды поддержки L3 и L2 выполняют DryRun (пробную установку релиза). Как правило за эту среду отечает группа L3 поддержки.
      
      Продакшн среда - среда, в которой работают пользователи. С этой средоой работает команда L2 поддержки, устанавливая поставки ПО или патчи с исправлениями, выполняя настройки, отвечая за работоспособность всех систем. Инциденты и проблемы требующие исправления ПО передаются в работу команде L3.
      
      В общем случае среда тестирования - это настройка программного и аппаратного обеспечения для тестирования.
      
---------------------------------------------------------------------------------------------

2. В чем отличие build от release?

       Build (сборка) - это номер, даваемый ПО при передаче от разработчиков тестировщикам.
       
       Release - это номер, даваемый ПО при передаче конечному пользователю.
       
----------------------------------------------------------------------------------------------

3. Основные фазы тестирования?

    1)  Pre-Alpha - ПО является прототипом. Пользовательский интерфейс завершен. Но не все функции завершены. На данном этапе ПО не публикуется.
    
    2)  Alpha - является ранней версией программного продукта. Цель - вовлечь клиента в процесс разработки. Хороший Альфа-тест должен иметь четко определенный план тестирования с комплексными тестовыми примерами. Это дает лучшее представление о надежности программного обеспечения на ранних стадиях. В некоторых случаях тестирование может быть передано на аутсорос.
    
    3)  Beta: ПО стабильно и выпускается для ограниченной пользовательской базы. Цель состоит в том, что бы получить отзывы клиентов о продукте и внести соответсвующие изменения в ПО.
    
    4)  Release Candidate (RC): основываясь на отзывах Beta test, вы вностите изменения в ПО и хотите проверить исправления ошибок. На этом этапе вы нехотите вносить радикальные изменения в функциональность, а просто проверяете наличие ошибок. RC также выпущен для общественности.
    
    5)  Release: Все работает, ПО выпущено для общественности.
    
-----------------------------------------------------------------------------------------------

4. Что такое импакт анализ?

       Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты.
       
------------------------------------------------------------------------------------------------

5. Критерии выбора тестов?

       Критерий должен быть достаточным , т.е. показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы.
       
       Критерий должен быть полным , т.е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку.
       
       Критерий должен быть надежным , т.е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы.
       
       Критерий должен быть легко проверяемым , например вычисляемым на тестах.
       
-----------------------------------------------------------------------------------------------------

6. Принципы тестирования?

  1. Тестирование демонстрирует наличие дефектов
  Тестирование может показать, что дефекты присутствуют, но не может доказать, что дефектов нет.
Сколько бы успешных тестов вы не провели, вы не можете утверждать, что нет таких тестов, которые не нашли бы ошибку. Но если мы нашли хотя бы один дефект, мы уже можем утверждать, что в данном ПО присутствуют дефекты.

  2.Исчерпывающее тестирование недостижимо
  Вместо попыток «протестировать все» нам нужен некий подход к тестированию (стратегия), который обеспечит правильный объем тестирования для данного проекта, данных заказчиков (и других заинтересованных лиц) и данного продукта. При определении, какой объем тестирования достаточен, необходимо учитывать уровень риска, включая технические риски и риски, связанные с бизнесом, и такие ограничения проекта как время и бюджет. Оценка и управление рисками – одна из наиболее важных активностей в любом проекте.
  
  3.Раннее тестирование
  Тестовые активности должны начинаться как можно раньше в цикле разработки и быть сфокусированы на определенных целях.
Этот принцип связан с понятием «цена дефекта» (cost of defect). Цена дефекта существенно растет на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Дефект, найденный в требованиях, обходится дешевле всего. 
Еще одно важное преимущество раннего тестирования – экономия времени. Тестовые активности могут начинаться еще до того, как написана первая строчка кода. По мере того, как готовятся требования и спецификации, тестировщики могут приступать к разработке и ревью тест-кейсов. И когда появится первая тестовая версия, можно будет сразу приступать к выполнению тестов.

  4.Скопление/кластеризация дефектов
  Небольшое количество модулей содержит большинство дефектов, обнаруженных на этапе предрелизного тестирования, или же демонстрируют наибольшее количество отказов на этапе эксплуатации.
Многие тестировщики наблюдали такой эффект – дефекты «кучкуются». Это может происходить потому, что определенная область кода особенно сложна и запутана, или потому, что внесение изменений производит «эффект домино». Это знание часто используется для оценки рисков при планировании тестов – тестировщики фокусируются на известных «проблемных зонах». Также полезно проводить анализ первопричин (root cause analysis), чтобы предотвратить повторное появление дефектов, обнаружить причины возникновения скоплений дефектов и спрогнозировать потенциальные скопления дефектов в будущем.

  5.Парадокс пестицида
  Если повторять те же тесты снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты. Повторное применение тех же тестов и тех же методик приводит к тому, что в продукте остаются именно те дефекты, против которых эти тесты и эти методики неэффективны.
Чтобы преодолеть «парадокс пестицидов», необходимо регулярно пересматривать существующие тест-кейсы и создавать новые, разнообразные тесты, которые будут выполняться на различных частях системы.
 
  6.Тестирование зависит от контекста
  Тестирование выполняется по-разному, в зависимости от контекста. Например, тестирование систем, критических с точки зрения безопасности, проводится иначе, чем тестирование сайта интернет-магазина.
Этот принцип тесно связан с понятием риска. Что такое риск? Риск – это потенциальная проблема. У риска есть вероятность (likelihood) – она всегда выше 0 и ниже 100% – и есть влияние (impact) – те негативные последствия, которых мы опасаемся. Анализируя риски, мы всегда взвешиваем эти два аспекта: вероятность и влияние.
То же можно сказать и о мире ПО: разные системы связаны с различными уровнями риска, влияние того или иного дефекта также сильно варьируется. Одни проблемы довольно тривиальны, другие могут дорого обойтись и привести к большим потерям денег, времени, деловой репутации, а в некоторых случаях даже привести к травмам и смерти.
Уровень риска влияет на выбор методологий, техник и типов тестирования.

  7.Заблуждение об отсутствии ошибок
  Нахождение и исправление дефектов бесполезно, если построенная система неудобна для использования и не соответствует нуждам и ожиданиям пользователей.
Заказчики ПО – люди и организации, которые покупают и используют его, чтобы выполнять свои повседневные задачи – на самом деле совершенно не интересуются дефектами и их количеством, кроме тех случаев, когда они непосредственно сталкиваются с нестабильностью продукта. Им также неинтересно, насколько ПО соответствует формальным требованиям, которые были задокументированы. Пользователи ПО более заинтересованы в том, чтобы оно помогало им эффективно выполнять задачи. ПО должно отвечать их потребностям, и именно с этой точки зрения они его оценивают.
Даже если вы выполнили все тесты и ошибок не обнаружили, это еще не гарантия того, что ПО будет соответствовать нуждам и ожиданиям пользователей.
Иначе говоря, верификация != валидация.

  8.Garbage in, garbage out (GIGO)
  В компьютерной науке «garbage in – garbage out» (GIGO) — это концепция, в которой ошибочные или бессмысленные входные данные создают бессмысленный вывод или «мусор», т.е. при неверных входящих данных будут получены неверные результаты, даже если сам по себе алгоритм правилен. В тестировании такие случаи иногда создают намеренно, но я добавил этот принцип в общий список для того, чтобы подчеркнуть важность подготовки качественных тестовых данных, положительные они или отрицательные.
    
--------------------------------------------------------------------------------------------------

7. Что такое независимое тестирование?

       Это тестирование силами дополнительно привлеченной компании ил группы людей не учавствующих непросредсвенно в разработке ПО.
       
----------------------------------------------------------------------------------------------------

8. Что такое тестирование со сдвигом влево?

       В попытке перенести тестирование на более ранний этап жизненного цикла разработки при одновременном улучшении показателей качества, задачи смещаются влево в схеме жизненного цикла разработки ПО. По возможности, тестирование должно проводиться с самого начала фазы проектирования, чтобы построить соответствующую стратегию тестирования. Проще говоря, это подход к тестированию программного обеспечения и тестированию системы, при котором тестирование выполняется на более раннем этапе жизненного цикла. Ключевые преимущества:
-Сокращение затрат 
-Более высокое качество
-Повышение эффективности 
-Конкурентные преимущества
       
-----------------------------------------------------------------------------------------------------

9. Почему тестирование делится на отдельные этапы?

-Каждый этап испытаний имеет свое назначение 
-Проще управлять поэтапно 
-Мы можем запустить разные тесты в разных средах 
-Производительность и качество тестирования улучшаются с помощью поэтапного тестирования
---------------------------------------------------------------------------------------------------

10. Какие есть этапы тестирования?

1. Работа с требованиями. Знакомство с требованиями заказчика, что должен из себя представлять итоговый продукт,обсуждения.
2. Разработка стратегии тестирования. Оценка сроков тестирования,выявление среды тестирования, объединение всей информации,полученной при работе с требованиями.
3. Создание тестовой документации. Написание сценариев, которые позволят проверить функционал.
4. Тестирование портотипа. Тестирование основного функционала продукта, корректировка целей,добавление фичей.
5. Основное тестирование. Выполнение общей проверки продукта.
6. Стабилизация. На данном этапе происходит работа над устранением багов.
7. Эксплуатация. Проводится регресс-тестирование,устранение ошибок,которые нашел конечный пользователь.
-----------------------------------------------------------------------------------------------------------------

11. Как вы тестируете продукт, если требования еще не зафиксированы?

Если спецификация требований недоступна для продукта, тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. Но мы должны хорошо документировать все предположения в плане тестирования. 
-----------------------------------------------------------------------------------------------
12. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?

Прежде всего, мы проверим, охватывает ли каждое требование хотя бы один Test case. Если да, то можно сказать, что тестовых примеров достаточно для тестирования продукта. 
--------------------------------------------------------------------------------------------------

13. Что подразумевается под тестовыми данными?

Тестовые данные - это набор входных значений, необходимых для выполнения Test case. тестировщики определяют данные в соответствии с требованиями. Они могут сделать это вручную или использовать инструменты генерации. 
--------------------------------------------------------------------------------------------------
14. Что такое бета-тестирование?

Бета-тестирование происходит на конечных пользователях. Это нужно для обеспечения обратной связи. 
----------------------------------------------------------------------------------------------------
15. Что означает пилотное тестирование? (Pilot)

PILOT testing определяется как тип тестирования программного обеспечения, который проверяет компонент системы или всю систему в режиме реального времени. Целью пилотного теста является оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта. Это тестирование проводится точно между UAT и Production. В пилотном тестировании выбранная группа конечных пользователей пробует тестируемую систему и предоставляет обратную связь до полного развертывания системы. Другими словами, это означает проведение генеральной репетиции для последующего теста на удобство использования. Пилотное тестирование помогает в раннем обнаружении ошибок в Системе.
Пилотное тестирование связано с установкой системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет постоянного и регулярного использования. Выявленные недостатки затем отправляются команде разработчиков в виде отчетов об ошибках, и эти ошибки исправляются в следующей сборке системы. Во время этого процесса иногда приемочное тестирование также включается как часть тестирования на совместимость. Это происходит, когда система разрабатывается для замены старой. 

--------------------------------------------------------------------------------------------------------
16. В чем отличие build от release?

       Build (сборка) - это номер, даваемый ПО при передаче от разработчиков тестировщикам.
       
       Release - это номер, даваемый ПО при передаче конечному пользователю.
       
---------------------------------------------------------------------------------------------------

17. Что такое бизнес – логика?

       Это то,что конкретная программа по задумке должна сделать. Например, в складской программе проверка на возможность отправить товар (вдруг его нет в наличии). Эти правила, которые должны соблюдаться в даной конкретной программе, определенные бизнес-клиентом. Слои преложения, слой пользовательского интерфейса, слой бизнес логики, слой созранения данных.
    
------------------------------------------------------------------------------------------------------------------
18. Какие существуют основные виды тестирования ПО?

     Функциональные виды («Что?» - проверяет весь функционал продукта):
  -Функциональное тестирование (Functional testing)
  -Тестирование взаимодействия (Interoperability testing)
     Нефункциональное («Как?»):
-Производительности (Performance)
-Тестирование емкости/способностей (Capacity testing)
-Стрессовое (Stress testing)
-Нагрузочное (Load testing)
-Объемное тестирование (Volume testing)
-Выносливости (Soak/Endurance testing)
-Стабильности/надежности (Stability / Reliability testing)
-Шиповое (Spike)
-Отказоустойчивости (Stability testing)
-Масштабируемости (Scalability test)
-Отказ и восстановление (Failover and Recovery testing)
-Удобство пользования (Usability testing)
-Тестирование установки (Installation testing)
-Тестирование безопасности (Security and Access Control testing)
-Конфигурационное (Configuration testing)
     Связанное с изменениями:
-Регрессионное (Regression testing)
-Санитарное (Sanity testing)
-Дымовое (Smoke testing)
-Тестирование сборки (Build Verification testing)
-------------------------------------------------------------------------------------------------
19. Методы тестирования?

 Метод черного ящика (black box testing) когда нет доступа к коду.
 метод белого ящика (white box) когда есть доступ к коду.
 метод серого ящика (grey box) когда есть частичный доступ к коду.
 
---------------------------------------------------------------------------------------------
20. Что такое пирамида / уровни тестирования?

«Пирамида тестов» — метафора, которая означает группировку тестов программного обеспечения по разным уровням детализации. Она также дает представление, какое количество тестов должно быть в каждой из этих групп. 
В тесте более высокого уровня вы не тестируете всю условную логику и пограничные случаи, которые уже покрыты юнит-тестами более низкого уровня. Убедитесь, что тест высокого уровня фокусируется только на том, что не покрыто тестами более низкого уровня.
-------------------------------------------------------------------------------------------------------------------------------

21. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)

ОТРИЦАТЕЛЬНОЕ ТЕСТИРОВАНИЕ - тип тестирования ПО для поиска точек отказа в программном обеспечении, который проверяет систему на обработку исключительных ситуаций (срабатывание валидаторов на некорректные данные), а также проверяет, что вызываемая приложением функция не выполняется при срабатывании валидатора. Неожиданные условия могут быть чем угодно, от неправильного типа данных до хакерской атаки. Целью отрицательного тестирования является предотвращение сбоя приложений из-за некорректных входных данных. Просто проводя положительное тестирование, мы можем только убедиться, что наша система работает в нормальных условиях. Мы должны убедиться, что наша система может справиться с непредвиденными условиями, чтобы обеспечить 100% безошибочную систему.
Типичные примеры: ввести неправильно составленный e-mail и номер телефона, загрузить файл не предусмотренного расширения или размера. 
---------------------------------------------------------------------------------------------------------------------------------------

22. Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)

НЕДЕСТРУКТИВНОЕ ТЕСТИРОВАНИЕ - это тип тестирования программного обеспечения, который включает в себя правильное взаимодействие с программным обеспечением. Другими словами, неразрушающее тестирование (NDT) также можно назвать позитивным тестированием или тестированием «счастливого пути». Это дает ожидаемые результаты и доказывает, что программное обеспечение ведет себя так, как ожидалось. Пример: - Ввод правильных данных в модуль входа в систему и проверка, принимает ли он учетные данные и переходит на следующую страницу.
-----------------------------------------------------------------------------------------------------------------------------------------
23. Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)

Это процесс, которым тестируется отдельные компоненты исходного кода программы. (эти тесты обычно проводят сами разработчики)
--------------------------------------------------------------------------------------------------------------------------------

24. Что подразумевается под интеграционным тестированием?

Интеграционное тестирование предназначено для проверки насколько хорошо два или более модулей ПО взаимодействуют друг с другом, а также взаимодействия с различными частями системы (операционной системой, оборудованием либо связи между различными системами).
---------------------------------------------------------------------------------------------------------------------------------

25. Разница между Unit testing и Integration testing?

Unit testing - это тестирование одного конкретного модуля, а интеграционное тестирование это тестирование между модулями.
-----------------------------------------------------------------------------------------------------

26. Что такое системное интеграционное тестирование? (SIT — System Integration testing)

Это тип тестирования программного обеспечения, проводимого в интегрированной аппаратной и программной среде для проверки поведения всей системы. Это тестирование, проведенное на полной интегрированной системе для оценки соответствия системы ее установленным требованиям. SIT выполняется для проверки взаимодействия между модулями программной системы. Оно занимается проверкой требований к программному обеспечению высокого и низкого уровня, указанных в Software Requirements Specification/Data and the Software Design Document. Он также проверяет сосуществование программной системы с другими и тестирует интерфейс между модулями программного приложения. В этом типе тестирования модули сначала тестируются индивидуально, а затем объединяются в систему. Например, программные и / или аппаратные компоненты объединяются и тестируются постепенно, пока не будет интегрирована вся система.
----------------------------------------------------------------------------------------------------------------
27. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)

Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент. Это полезно при тестировании по принципу «снизу-вверх». Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. Они актуальны для тестирования, в котором используется нисходящий подход. Давайте возьмем пример. 
1. Допустим, есть сценарий для проверки интерфейса между модулями A и B. Мы разработали только модуль-A. Затем мы можем проверить модуль-A, если у нас есть реальный модуль-B или фиктивный модуль для него. В этом случае мы называем модуль-B тестовой заглушкой. 
2. Теперь модуль B не может отправлять или получать данные напрямую из модуля A. В таком сценарии мы перемещаем данные из одного модуля в другой, используя некоторые внешние функции, называемые Test Driver.
Заглушки и драйверы не реализуют всю логику программного модуля, а только моделируют обмен данными с вызывающим модулем. Заглушка: вызывается тестируемым модулем. Драйвер: вызывает модуль для тестирования.
------------------------------------------------------------------------------------------------------------------------------

28. Что подразумевается под системным тестированием?

Системное тестирование качественно отличается от интеграционного и модульного уровней. Системное тестирование рассматривает тестируемую систему в целом и оперирует на уровне пользовательских интерфейсов, в отличие от последних фаз интеграционного тестирования, которое оперирует на уровне интерфейсов модулей. Различны и цели этих уровней тестирования. На уровне системы часто сложно и малоэффективно анализировать прохождение тестовых траекторий внутри программы или отслеживать правильность работы конкретных функций. Основная задача системного тестирования - в выявлении дефектов, связанных с работой системы в целом, таких как неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство в применении и тому подобное.
Системное тестирование производится над проектом в целом с помощью метода "черного ящика". Структура программы не имеет никакого значения, для проверки доступны только входы и выходы, видимые пользователю.
---------------------------------------------------------------------------------------------------------------------------------------
29. Что такое функциональное тестирование?

Функциональное тестирование рассматривает заранее указанное поведение и основывается на анализе спецификаций функциональности компонента или системы в целом.
------------------------------------------------------------------------------------------------------
30. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)

Тестирование взаимодействия - функциональное тестирование, проверяющее способность приложения/устройства взаимодействовать с одним и более компонентами/системами/устройствами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование (integration testing). 
--------------------------------------------------------------------------------------------------------

31. Что такое тестирование на соответствие? (Conformance/Compilance testing)

CONFORMANCE testing - это тип тестирования программного обеспечения, который удостоверяет, что система программного обеспечения соответствует стандартам и правилам, определенным IEEE, W3C или ETSI. Цель проверки соответствия состоит в том, чтобы определить, в какой степени отдельная реализация конкретного стандарта соответствует индивидуальным требованиям этого стандарта.
-----------------------------------------------------------------------------------

32. Что такое нефункциональное тестирование?

НЕФУНКЦИОНАЛЬНОЕ тестирование определяется как тип тестирования ПО для проверки нефункциональных аспектов ПО. Оно предназначено для проверки готовности системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.
----------------------------------------------------------------------------------------------------------

33. Что вы знаете о Тестировании удобства пользования?

Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий.
-------------------------------------------------------------------------------------------------------------------

34. Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)

USABILITY testing показывает, насколько проста в использовании и удобна система программного обеспечения. Здесь небольшой набор целевых конечных пользователей «использует» программную систему для выявления дефектов юзабилити. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX – “Ю-Экс”, user experience). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследования (Virzi, 1992 и Neilsen Landauer, 1993) показывают, что 5 пользователей достаточно для выявления 80% проблем с юзабилити, хотя некоторые исследователи предлагают другие цифры.
Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук. 
--------------------------------------------------------------------------------------

35. Что такое тестирование интерфейса?

Это тип интеграционного теста, который проверяет, правильно ли установлена связь между двумя различными программными системами или их частями (модулями). Соединение, которое объединяет два компонента, называется интерфейсом. Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т. д.  Тестирование этих подключаемых сервисов или интерфейса называется Тестированием интерфейса.
Тестирование интерфейса включает в себя тестирование двух основных сегментов: 
Интерфейс веб-сервера и сервера приложений 
Интерфейс сервера приложений и базы данных
------------------------------------------------------------------------------------

36. Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)

Это тип тестирования программного обеспечения, который проверяет, что каждый software workflow точно отражает данный бизнес-процесс. Workflow - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов. Для любого бизнес-процесса тестирование этих последовательных шагов определяется как «WorkFlow testing».
Например, убедитесь, что система может быть установлена на платформе пользователя и работает правильно. Тестирование рабочего процесса проводится поэтапно. Вот как вы будете выполнять Workflow testing:
Начальная фаза (Inception phase): эта фаза включает начальное планирование испытаний и тестирование прототипа 
Фаза разработки (Elaboration phase): Эта фаза включает базовую архитектуру тестирования 
Фаза строительства (Construction phase): эта фаза включает в себя значительные испытания в каждой сборке 
Фаза перехода (Transition phase): Эта фаза включает в себя регрессионные тесты и повторные тесты исправлений
--------------------------------------------------------------------------------------------------------

37. Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)

Пользовательское приемочное тестирование (UAT) - это тип тестирования, выполняемый конечным пользователем или клиентом для проверки / принятия ПО перед его перемещением в production. UAT выполняется на заключительном этапе тестирования после выполнения функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка end-to-end business flow. Он не фокусируется на косметических ошибках, орфографических ошибках или тестировании системы. Приемочное тестирование пользователя выполняется в отдельной среде тестирования с настройкой данных, аналогичных производственным. Это своего рода тестирование черного ящика, в котором будут участвовать два или более конечных пользователя. Этапы:
-Анализ бизнес-требований 
-Создать плана тестирования UAT 
-Определить Test Scenario 
-Создать Test case UAT 
-Подготовить Test Data (Production like Data) 
-Запустить Test case
-Записать результаты
-подтвердить бизнес-цели
---------------------------------------------------------------------------------------------------------------

38. Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)

ИСПЫТАНИЕ НА ЭКСПЛУАТАЦИЮ (OAT) - это тип тестирования программного обеспечения, который оценивает операционную готовность программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы системы в ее стандартной операционной среде (SOE - standard operating environment). Это также называется Оперативное тестирование (Operational testing). Эксплуатационное приемочное тестирование обеспечивает соответствие системы и компонентов в стандартной операционной среде приложения (SOE). Типы OAT:
Installation testing
Load & Performance Test Operation
Backup and Restore testing
Security testing
Code Analysis
Fail over testing
Recovery testing
End-to-End Test Environment Operational testing
Operational Documentation Review
Примеры Test case:
Резервные копии, сделанные на одном сайте, могут быть развернуты на тот же сайт 
Резервные копии, сделанные на одном сайте, можно развернуть на другом сайте. 
Внедрение любых новых функций в живую производственную среду не должно отрицательно влиять на целостность текущих производственных услуг. 
Процесс внедрения может быть воспроизведен с использованием действующей документации 
Каждый компонент может быть отключен и успешно запущен в согласованные сроки. 
Для оповещений - все критические оповещения должны идти в TEC и ссылаться на документ правильного разрешения. 
Оповещения созданы и выдаются при превышении согласованных пороговых значений 
Любая документация по восстановлению, созданная или измененная, включая сервисные диаграммы, действительна 
Это должно быть передано в соответствующие области поддержки. 
Любой компонент, на который влияет сбой, должен показывать рекомендуемый порядок перезапуска, время завершения и т. д. 
--------------------------------------------------------------------------

39. Что такое инсталляционное тестирование?

Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления ПО, как десктопного, так и мобильного.
Тестирование инсталляции в большинстве своем не входит в Веб-тестирование, являясь специализированным тестированием установки приложений на различные операционные системы.
--------------------------------------------------------------

40. Что вы знаете о тестировании безопасности?

Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. Общая стратегия безопасности основывается на трех основных принципах:
Конфиденциальность - сокрытие определенных ресурсов или информации
Целостность – ресурс может быть изменен только в соответствии с полномочиями пользователя
Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству
-----------------------------------------------------------------------------------------------
41. Что такое конфигурационное тестирование?

Конфигурационное тестирование (Configuration testing) — специальный вид тестирования, направленный на проверку работы ПО при различных аппаратных и программных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т. д. )
-------------------------------------------------------------------------------------------------------

42. Объясните, что такое тестирование N+1

Вариант регрессионного тестирования представлен как N+1. В этом методе тестирование выполняется в несколько циклов, в которых ошибки, обнаруженные в тестовом цикле «N», устраняются и повторно тестируются в тестовом цикле N + 1. Цикл повторяется, пока не будет найдено ни одной ошибки.
-------------------------------------------------------------------------
43. Что вы знаете о тестировании сборки? (Build Verification Test)

естирование, направленное на определение соответствия, выпущенной версии, критериям качества для начала тестирования. По своим целям является аналогом Дымового Тестирования, направленного на приемку новой версии в дальнейшее тестирование или эксплуатацию. Вглубь оно может проникать дальше, в зависимости от требований к качеству выпущенной версии.
-------------------------------------------------------------------------------------

44. Что такое тестирование потоков? (Thread testing)

Тестирование потоков определяется как тип тестирования программного обеспечения, который проверяет основные функциональные возможности конкретной задачи (потока). Обычно проводится на ранней стадии фазы интеграционного тестирования. Тестирование на основе потоков является одной из дополнительных стратегий, принятых в ходе тестирования системной интеграции. Поэтому его, вероятно, следует более правильно назвать «тестом взаимодействия потоков» (thread interaction test).
Тестирование на основе потоков подразделяется на две категории:
Однопоточное тестирование включает одну транзакцию приложения за раз 
Многопоточное тестирование включает одновременно несколько активных транзакций
Как производить:
Тестирование на основе потоков является обобщенной формой тестирования на основе сеансов (session-based testing), в котором сеансы являются формой потока, но поток не обязательно является сеансом. 
Для тестирования потока, поток или программа (небольшая функциональность) интегрируются и тестируются постепенно как подсистема, а затем выполняются для всей системы. 
На самом низком уровне оно предоставляет интеграторам лучшее представление о том, что тестировать. 
Вместо непосредственного тестирования программных компонентов требуется, чтобы интеграторы сосредоточились на тестировании логических путей выполнения в контексте всей системы.
-------------------------------------------------------------------------
45. Что вы знаете о мутационном тестировании? (Mutation testing)

Mutation testing - это тип тестирования программного обеспечения, в котором мы мутируем (меняем) определенные выражения в исходном коде и проверяем, способны ли Test case найти ошибки. Это тип тестирования белого ящика, который в основном используется для модульного тестирования. Изменения в мутантной программе сохраняются крайне небольшими, поэтому это не влияет на общую цель программы. Цель Mutation testing - оценить качество Test case, которые должны быть достаточно надежными, чтобы не выполнять мутантный код. Этот метод также называется стратегией тестирования на основе ошибок, так как он включает в себя создание ошибки в программе. 
Шаг 1: Ошибки вводятся в исходный код программы путем создания множества версий, называемых мутантами. Каждый мутант должен содержать одну ошибку, и цель состоит в том, чтобы заставить версию мутанта потерпеть неудачу, что демонстрирует эффективность Test case. 
Шаг 2: Test case применяются к исходной программе, а также к программе мутанта. 
Шаг 3: Сравните результаты оригинальной и мутантной программы. 
Шаг 4: Если исходная программа и программы-мутанты генерируют разные выходные данные, то этот мутант уничтожается by the Test case. Следовательно, Test case достаточно хорош, чтобы обнаружить изменение между оригинальной и мутантной программой. 
Шаг 5: Если исходная программа и программа-мутант генерируют одинаковые выходные данные, мутант остается в живых. В таких случаях необходимо создать более эффективные Test case, которые убивают всех мутантов.
Что изменить в программе мутантов? Есть несколько методов, которые могут быть использованы для создания мутантных программ: 
Операторы замены операндов (Operand replacement operators) – например, в условии if (x> y) поменять местами значения x и y
Операторы модификации выражений (Expression Modification Operators) – например, в условии if (х == у) Мы можем заменить == на >=
Операторы модификации операторов (Statement modification Operators) – например, удалить часть else в конструкции if-else или удалить целиком конструкцию if-else, чтобы проверить, как ведет себя программа
Оценка мутации = (убитые мутанты / общее количество мутантов) * 100

Автоматизированные инструменты для разных ЯП: mutmut, Humbug и Infection и т.п. 
----------------------------------------------------------------------------------------

46. В чем разница между Baseline и Benchmark testing?

Baseline предназначено для оценки производительности приложения. Benchmark сравнивает производительность приложения с отраслевым стандартом. 
Baseline тестирование использует данные, собранные для повышения производительности. Benchmark возвращает информацию о целевом приложении по сравнению с другими приложениями.
Baseline тестирование сравнивает текущую производительность с предыдущей производительностью приложения, тогда как Benchmark сравнивает производительность нашего приложения с производительностью конкурентов.
----------------------------------------------------------------------------------------

47. Что такое A/B тестирование?

A / B-тестирование также называется сплит-тестированием (split). При тестировании AB мы создаем и анализируем два варианта приложения, чтобы найти, какой вариант работает лучше с точки зрения пользовательского опыта, потенциальных клиентов, конверсий или любой другой цели, а затем в конечном итоге сохранить наиболее эффективный вариант. 
Давайте попробуем понять это на примере. Предположим, у нас есть интернет магазин и каталог отображается определенным образом. В какой-то момент (новые маркетинговые исследования/пожелания клиента и т. д.) решено изменить дизайн выдачи товаров в каталоге. Независимо от того, сколько проведено анализа, выпуск нового пользовательского интерфейса будет большим изменением и может иметь неприятные последствия. 
В этом случае мы можем использовать A / B-тестирование. Мы создадим интерфейс нового варианта и выпустим его для некоторого процента пользователей. Например - мы можем распределить пользователей в соотношении 50:50 или 80:20 между двумя вариантами - A и B. После этого в течение определенного периода времени мы будем наблюдать эффективность обоих вариантов. Таким образом, тестирование A/B помогает принять решение о выборе лучшего варианта.
---------------------------------------------------------------------

48. Что означает сквозное тестирование? (E2E — End–to–End)

Сквозное тестирование - это стратегия тестирования для выполнения тестов, которые охватывают все возможные потоки приложения от его начала до конца; проверяет программную систему вместе с ее интеграцией с внешними интерфейсами. Целью сквозного тестирования является создание полного производственного сценария, выявление программных зависимостей и утверждение, что между различными программными модулями и подсистемами передается правильный ввод. Сквозное тестирование обычно выполняется после функционального и системного тестирования. Оно использует реальные данные, такие как данные и тестовая среда, для имитации настроек в реальном времени. Сквозное тестирование также называется цепным тестированием (Chain testing).
Для чего оно нужно? Современные программные системы являются сложными и взаимосвязаны с несколькими подсистемами. Подсистема может отличаться от текущей системы или может принадлежать другой организации. Если какая-либо из подсистем выйдет из строя, вся система программного обеспечения может рухнуть. Это серьезный риск, и его можно избежать путем сквозного тестирования. 
------------------------------------------------------------------------------------
49. В чем разница между E2E и системным тестированием?


50. Что такое параллельное тестирование? (Parallel testing)

Это тип тестирования ПО, который одновременно проверяет несколько приложений или подкомпонентов одного приложения, чтобы сократить время выполнения теста. При параллельном тестировании тестировщик запускает две разные версии программного обеспечения одновременно с одним и тем же вводом. Цель состоит в том, чтобы выяснить, ведут ли себя прежняя система и новая система одинаково или по-разному. Это гарантирует, что новая система достаточно способна для эффективной работы программного обеспечения.
--------------------------------------------------------------------------------

51. Чем AdHock тестирование отличается от Исследовательского тестирования?



